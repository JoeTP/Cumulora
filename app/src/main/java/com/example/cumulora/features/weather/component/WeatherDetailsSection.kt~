@file:OptIn(ExperimentalFoundationApi::class)

package com.example.cumulora.features.weather.component

import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.PagerState
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Surface
import androidx.compose.material3.Tab
import androidx.compose.material3.TabRow
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import com.example.cumulora.R
import com.example.cumulora.component.OvalCard

@Composable
fun WeatherDetailsSection() {
    val tabs = listOf("Current", "5 Days")
    var selectedTabIndex by remember { mutableStateOf(0) }
    val pagerState = rememberPagerState { tabs.size }


    LaunchedEffect(selectedTabIndex) {
        pagerState.scrollToPage(selectedTabIndex)
    }

    LaunchedEffect(pagerState.currentPage, pagerState.isScrollInProgress) {
        if (!pagerState.isScrollInProgress) {
            selectedTabIndex = pagerState.currentPage
        }
    }

    WeatherDetailsSectionChild(
        tabs = tabs,
        selectedTabIndex = selectedTabIndex,
        pagerState = pagerState,
        onTabSelected = { index -> selectedTabIndex = index }
    )
}

@Composable
private fun WeatherDetailsSectionChild(
    tabs: List<String>,
    selectedTabIndex: Int,
    pagerState: PagerState,
    onTabSelected: (index: Int) -> Unit
) {

    Column {
        TabRow(selectedTabIndex = selectedTabIndex) {
            tabs.forEachIndexed { index, title ->
                Tab(
                    selected = selectedTabIndex == index,
                    onClick = { onTabSelected(index) },
                    text = { Text(text = title) }
                )
            }
        }
        HorizontalDivider(modifier = Modifier.padding(vertical = 4.dp))

        HorizontalPager(
            state = pagerState,
            userScrollEnabled = false,
            modifier = Modifier
                .fillMaxSize()
                .background(Color.Blue)
        ) { page ->
            when (page) {
                0 -> CurrentTab()
                1 -> FiveDaysTab()
            }
        }
    }
}

@Composable
fun CurrentTab() {
    Column {
        LazyRow(
            contentPadding = PaddingValues(horizontal = 16.dp),
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            items(count = 15) { index ->
                OvalCard()
            }
        }
        LazyVerticalGrid(
            columns = GridCells.Fixed(2),
            modifier = Modifier
                .height(400.dp)
                .padding(horizontal = 16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp),
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            item {
                WeatherCard("Humidity", R.drawable.humidity) {
                    Surface(color = Color.Red, modifier = Modifier.fillMaxSize()) {
                        Text(text = "Item ")
                    }
                }
            }
            item {
                WeatherCard("Wind Speed", R.drawable.wind) {
                    Surface(color = Color.Red, modifier = Modifier.fillMaxSize()) {
                        Text(
                            text = "Item ",
                        )
                    }
                }
            }
            item {
                WeatherCard("Pressure", R.drawable.rain) {
                    Surface(color = Color.Red, modifier = Modifier.fillMaxSize()) {
                        Text(
                            text = "Item ",
                        )
                    }
                }
            }
            item {
                WeatherCard("Clouds", R.drawable.cloud_icon) {
                    Surface(color = Color.Red, modifier = Modifier.fillMaxSize()) {
                        Text(text = "Item ")
                    }
                }
            }
        }
    }
}

@Composable
fun FiveDaysTab() {
    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
        Text(text = "FiveDaysTab")
    }
}